function u0:0() -> i32 system_v {
    gv0 = symbol colocated userextname2
    sig0 = (i32) -> i32 system_v
    sig1 = () -> i32 system_v
    fn0 = u0:0 sig0
    fn1 = u0:1 sig1

block0:
    v0 = global_value.i64 gv0
    v1 = iadd_imm v0, 0x3a98
    v2 = iconst.i8 8
    store v2, v1  ; v2 = 8
    v3 = load.i8 v1
    v4 = load.i8 v1+1
    v5 = iadd v4, v3
    store v5, v1+1
    v6 = load.i8 v1
    v7 = load.i8 v1+2
    v8 = imul_imm v6, 4
    v9 = iadd v7, v8
    store v9, v1+2
    v10 = iconst.i8 0
    store v10, v1  ; v10 = 0
    v11 = load.i8 v1+1
    v12 = iadd_imm v11, 2
    store v12, v1+1
    v13 = load.i8 v1+3
    v14 = iadd_imm v13, 1
    store v14, v1+3
    v15 = iadd_imm v1, 2
    v19 = load.i8 v15
    brif v19, block2(v15), block3(v15)

block2(v17: i64):
    v21 = load.i8 v17
    v22 = iadd_imm v21, -1
    store v22, v17
    v23 = load.i8 v17
    v24 = load.i8 v17+2
    v25 = iadd v24, v23
    store v25, v17+2
    v26 = iconst.i8 0
    store v26, v17  ; v26 = 0
    v27 = iconst.i8 1
    store v27, v17  ; v27 = 1
    v28 = iadd_imm v17, 2
    jump block1(v28)

block1(v16: i64):
    v20 = load.i8 v16
    brif v20, block2(v16), block3(v16)

block3(v18: i64):
    v29 = iadd_imm v18, 1
    v30 = load.i8 v29
    v31 = iadd_imm v30, 1
    store v31, v29
    v35 = load.i8 v29
    brif v35, block5(v29), block6(v29)

block5(v33: i64):
    v37 = load.i8 v33
    v38 = iadd_imm v37, -1
    store v38, v33
    v39 = iadd_imm v33, -3
    v43 = load.i8 v39
    brif v43, block8(v39), block9(v39)

block8(v41: i64):
    v45 = load.i8 v41
    v46 = iadd_imm v45, -1
    store v46, v41
    v47 = iadd_imm v41, 1
    v51 = load.i8 v47
    brif v51, block11(v47), block12(v47)

block11(v49: i64):
    v53 = iconst.i8 0
    store v53, v49  ; v53 = 0
    v54 = iconst.i8 1
    store v54, v49  ; v54 = 1
    v55 = load.i8 v49+1
    v56 = iadd_imm v55, 2
    store v56, v49+1
    v57 = load.i8 v49+4
    v58 = iadd_imm v57, -1
    store v58, v49+4
    v59 = iadd_imm v49, 2
    jump block10(v59)

block10(v48: i64):
    v52 = load.i8 v48
    brif v52, block11(v48), block12(v48)

block12(v50: i64):
    v60 = iadd_imm v50, -1
    v64 = load.i8 v60
    brif v64, block14(v60), block15(v60)

block14(v62: i64):
    v66 = iadd_imm v62, -1
    jump block13(v66)

block13(v61: i64):
    v65 = load.i8 v61
    brif v65, block14(v61), block15(v61)

block15(v63: i64):
    v67 = load.i8 v63+2
    v68 = iadd_imm v67, 6
    store v68, v63+2
    v69 = load.i8 v63+2
    v70 = load.i8 v63
    v71 = imul_imm v69, 5
    v72 = iadd v70, v71
    store v72, v63
    v73 = iconst.i8 0
    store v73, v63+2  ; v73 = 0
    v74 = iconst.i8 1
    store v74, v63+2  ; v74 = 1
    v75 = load.i8 v63
    v76 = iadd_imm v75, 2
    store v76, v63
    v77 = uload8.i32 v63
    v78 = call fn0(v77)
    v79 = iconst.i8 0
    store v79, v63  ; v79 = 0
    v80 = iadd_imm v63, -2
    jump block7(v80)

block7(v40: i64):
    v44 = load.i8 v40
    brif v44, block8(v40), block9(v40)

block9(v42: i64):
    v81 = uload8.i32 v42+1
    v82 = call fn0(v81)
    v83 = load.i8 v42+2
    v84 = iadd_imm v83, 1
    store v84, v42+2
    v85 = iadd_imm v42, 2
    v89 = load.i8 v85
    brif v89, block17(v85), block18(v85)

block17(v87: i64):
    v91 = iadd_imm v87, 2
    jump block16(v91)

block16(v86: i64):
    v90 = load.i8 v86
    brif v90, block17(v86), block18(v86)

block18(v88: i64):
    v92 = iadd_imm v88, 1
    v93 = load.i8 v92
    v94 = iadd_imm v93, 1
    store v94, v92
    jump block4(v92)

block4(v32: i64):
    v36 = load.i8 v32
    brif v36, block5(v32), block6(v32)

block6(v34: i64):
    v98 = load.i8 v34
    brif v98, block20(v34), block21(v34)

block20(v96: i64):
    v100 = uload8.i32 v96
    v101 = call fn0(v100)
    jump block19(v96)

block19(v95: i64):
    v99 = load.i8 v95
    brif v99, block20(v95), block21(v95)

block21(v97: i64):
    v102 = iconst.i32 0
    return v102  ; v102 = 0
}
